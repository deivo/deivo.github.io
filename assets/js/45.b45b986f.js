(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{765:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[t._v("#")]),t._v(" 变量提升")]),t._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介：")]),t._v(" "),a("ul",[a("li",[t._v("JS 代码自上而下执行之前，浏览器会提前处理一些事情（可以理解为：词法解析的一个环节，因为词法解析一般发生在代码的执行之前）")])]),t._v(" "),a("h3",{attrs:{id:"具体做来那些事情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具体做来那些事情"}},[t._v("#")]),t._v(" 具体做来那些事情？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("ol",[a("li",[t._v("把当前上下文中所有带"),a("code",[t._v("var")]),t._v("提前声明，带"),a("code",[t._v("function")]),t._v(" 关键字的进行提前的声明和定义")]),t._v(" "),a("li",[t._v("基于"),a("code",[t._v("var")]),t._v("或"),a("code",[t._v("function")]),t._v("在"),a("code",[t._v("全局上下文")]),t._v("中声明的变量，无论是严格模式还是非严格模式，都会映射到 GO（全局对象）一份，作为全局对象的属性；如果一个地方修改，另一个也跟着会修改。")])])]),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"title"}),a("p",[t._v("在使用 es6 提供的 let/const 声明的变量，不存在变量提升和映射全局的特性，")])]),a("h3",{attrs:{id:"注意-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意-1"}},[t._v("#")]),t._v(" 注意 1：")]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"title"}),a("ul",[a("li",[t._v("不论条件是否成立，都要进行变量提升（条件中带[[function]]在新版本浏览器中只会提前声明，不会在提前赋值了）")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("上面代码，在全局上下文中，新版本浏览器输出结果："),a("code",[t._v("undefined undefined undefined")]),t._v("，老版本浏览器（"),a("code",[t._v("< ie10")]),t._v("版本）输出结果："),a("code",[t._v("undefined 函数 undefined")])])])]),a("h3",{attrs:{id:"注意-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意-2"}},[t._v("#")]),t._v(" 注意 2：")]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"title"}),a("ul",[a("li",[a("p",[t._v("新版本的浏览器")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("向下兼容 ES3/5 规范")]),t._v(" "),a("ul",[a("li",[t._v("判断体和函数体等不在块级上下文，上下文中只有全局和私有")]),t._v(" "),a("li",[t._v("不论条件是否成立，带 function 的都要"),a("code",[t._v("声明")]),t._v(" + "),a("code",[t._v("定义")])])])]),t._v(" "),a("li",[a("p",[t._v("向上兼容 ES6 规范")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("存在块级作用域")]),t._v("：大括号中出现 let/const/function...都会认为是"),a("code",[t._v("块级作用域")]),t._v(" - 不论条件是否成立，带"),a("code",[t._v("function")]),t._v("的"),a("code",[t._v("只提前声明")]),t._v("，不会"),a("code",[t._v("提前赋值")])])])])])])])]),a("h3",{attrs:{id:"示例一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例一"}},[t._v("#")]),t._v(" 示例一")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("上面代码执行，浏览器要兼容 ES3/5，向上兼容 ES6，"),a("code",[t._v("function a")]),t._v("在全局下声明过，也在私有下处理过，遇到此行代码，私有下不会在处理，但是浏览器会把当前代码“之前”(包括"),a("code",[t._v("变量提升")]),t._v("定义也要映射到全局)，所有对 a 的操作，映射给全局一份，以此兼容 ES3，但是它后面 的代码和全局没有任何关系")])]),t._v(" "),a("h3",{attrs:{id:"示例二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例二"}},[t._v("#")]),t._v(" 示例二")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n")])])]),a("ul",[a("li",[t._v("只有在"),a("code",[t._v("除函数以外大括号中的函数")]),t._v("“，在不同的浏览器中表现不一致：低版本是"),a("code",[t._v("声明")]),t._v("+"),a("code",[t._v("定义")]),t._v(",高版本"),a("code",[t._v("只声明")]),t._v("（"),a("code",[t._v("高版本会把大括号当做块作用域")]),t._v("）")])]),t._v(" "),a("h3",{attrs:{id:"函数arguments和行参之间关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数arguments和行参之间关系"}},[t._v("#")]),t._v(" 函数"),a("code",[t._v("arguments")]),t._v("和"),a("code",[t._v("行参")]),t._v("之间关系")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("条件：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("非严格模式")]),t._v("下，"),a("code",[t._v("arguments")]),t._v("和"),a("code",[t._v("形参")]),t._v("存在映射机制")]),t._v(" "),a("li",[a("code",[t._v("严格模式")]),t._v("下，"),a("code",[t._v("arguments")]),t._v("和"),a("code",[t._v("形参")]),t._v("映射机制不存在")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * 非严格模式下，映射机制\n   *  x ---------- argument[0]\n   *  y ---------- argument[1]\n   *  z ---------- argument[2]\n   */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arguments必须是传了值才会有值，如果没有传，是没有值")]),t._v("\n  x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("以上示例，在"),a("code",[t._v("非严格模式")]),t._v("和"),a("code",[t._v("严格模式")]),t._v("下打印不同的返回结果")])]),t._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("ul",[a("li",[t._v("真实项目通常使用"),a("code",[t._v("函数表达式")]),t._v("来创建函数，因为这样在变量提升阶段只会声明函数，不会赋值")]),t._v(" "),a("li",[t._v("函数表达式匿名函数"),a("code",[t._v("具名化")]),t._v("（虽然是起了名字，但是这个不能在外面访问）,但函数执行，在形成私有上下文中，会把这个具名化的名字作为私有上下文中的变量（值就是这个函数）来进行处理。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AAA")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ok'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AAA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AAA(); 递归调用  而不用严格模式下都不支持的 arguments.callee了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("h3",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("ul",[a("li",[t._v("函数执行会形成全新的私有上下文，这个上下文可能被释放，也可能不被释放，不论是否被释放，它的作用是：\n"),a("ul",[a("li",[a("code",[t._v("保护")]),t._v("：划分一个独立的代码执行区域，再这个区域中有自己私有变量存储的空间，而用到的私有变量和其它区域中的变量不会有任何的冲突（"),a("code",[t._v("防止全局污染")]),t._v("）")]),t._v(" "),a("li",[a("code",[t._v("保存")]),t._v("：如果上下文不销毁，那么存储的私有变量值也不会被销毁，可以被其下级上下文中调取使用")])])]),t._v(" "),a("li",[t._v("函数执行，形成私有上下文，来保护和保存私有变量的机制，称之为 "),a("strong",[t._v('"闭包"')]),t._v("，所以闭包是一种机制。")])]),t._v(" "),a("h4",{attrs:{id:"市面上认为的两种闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#市面上认为的两种闭包"}},[t._v("#")]),t._v(" 市面上认为的两种闭包：")]),t._v(" "),a("ol",[a("li",[t._v("函数执行形成的私有上下文不被销毁，才算 "),a("strong",[t._v("闭包")])]),t._v(" "),a("li",[t._v("函数执行形成的私有上下文不被销毁，只有下级上下文用到了此上下文中的东西才算 "),a("strong",[t._v("闭包")])])]),t._v(" "),a("h3",{attrs:{id:"不销毁的上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不销毁的上下文"}},[t._v("#")]),t._v(" 不销毁的上下文")]),t._v(" "),a("ul",[a("li",[t._v("函数执行形成私有的上下文，当前上下文进栈执行，经过一些系列操作（代码执行之前和代码执行），正常情况下，代码执行完，私有上下文会出栈（出站后被释放，以此节约栈内存的空间）；但是有特殊情况，如果当前上下文中的某个东西（一般是堆）被上下文以外的事物占用了，则当前上下文不会再出栈释放，也就是形成不销毁的上下文。")])]),t._v(" "),a("h2",{attrs:{id:"作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),a("h3",{attrs:{id:"概念-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念-2"}},[t._v("#")]),t._v(" 概念：")]),t._v(" "),a("ul",[a("li",[t._v("私有执行上下文中代码执行的时候，遇到一个变量，先看在当前作用域中是否存在，如果不存在，则向它的上级作用域中查找，如果该变量不存在，将再次查找直到找到全局，如果找到，则可以使用它，否则会报错，把这种查找的机制叫"),a("code",[t._v("作用域链")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{809:function(t,e,s){"use strict";s.r(e);var a=s(13),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("hr"),t._v(" "),s("p",[t._v("title: 【JavaScript】vue-router的原理及使用：\ndate: 2020-03-20\nclassName: deivo-title\nbgImage: '/itdeivo/img/1.jpg'\ncategories:")]),t._v(" "),s("ul",[s("li",[t._v("Interview")]),t._v(" "),s("li",[t._v("Vue\ntags:")]),t._v(" "),s("li",[t._v("Interview")]),t._v(" "),s("li",[t._v("Vue")]),t._v(" "),s("li",[t._v("路由")])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"vue-router的原理及使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-router的原理及使用"}},[t._v("#")]),t._v(" vue-router的原理及使用：")]),t._v(" "),s("p",[t._v("**原理：**当我们通过Vue.use注册vue-router路由的时候，会为用户提供两个全局组件 router-link和router-view，提供两个组件主要是路由有可能是 "),s("strong",[t._v("hash模式")]),t._v(" 或 "),s("strong",[t._v("history模式")]),t._v(" ，通过两个组件来兼容，记下来就是根据不同的路径，渲染不同的组件。")]),t._v(" "),s("p",[s("strong",[t._v("使用：")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("导入vue-router路由")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import VueRouter from 'vue-router'\n")])])])]),t._v(" "),s("li",[s("p",[t._v("注册vue-router")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Vue.use(VueRouter); \n")])])])]),t._v(" "),s("li",[s("p",[t._v("添加路由配置，并且导出路由的实例")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("export default new VueRouter({\n    mode: 'hash',\n    routes: [\n        {\n            path: '/',\n            component: Home\n        },\n        {\n            path: '/about',\n            component: About,\n            children: [\n                {\n                    path: 'a',\n                    component: {\n                        render: (h) => <h1>about a</h1>\n                    }\n                },\n                {\n                    path: 'b',\n                    component: {\n                        render: (h) => <h1>about b</h1>\n                    }\n                }\n            ]\n        }\n    ]\n})\n")])])])]),t._v(" "),s("li",[s("p",[t._v("在vue创建实例的时候，需要被注册到vue的实例中")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.js")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("el")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#app'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  router"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注入router实例")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("h")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("App"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("在vue的组件中可以通过两个属性分别获取对应的属性或方法")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$route  存放的是当前路由的属性等\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$router 存放的当前实例中的方法等\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"vue-router路由实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-router路由实现原理"}},[t._v("#")]),t._v(" vue-router路由实现原理：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("默认vue-router插件导出的是一个类**(VueRouter)**，用户会new来创建vur-router的实例")])]),t._v(" "),s("li",[s("p",[t._v("导出VueRouter身上有一个方法"),s("strong",[t._v("install")])])]),t._v(" "),s("li",[s("p",[t._v("当用户"),s("strong",[t._v("Vue.use")]),t._v("来注册"),s("strong",[t._v("VueRouter")]),t._v("这个类的时候，会默认执行VueRouter这个类自身的"),s("strong",[t._v("install")]),t._v("方法")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("install")]),t._v("方法默认接受两个参数，分别是："),s("strong",[t._v("Vue")]),t._v(" 和"),s("strong",[t._v("options")]),t._v("，为什么要传入Vue这个类呢，传入的这个Vue是Vse.use的时候和用户的版本保持一致，这样处理会兼容不同版本的Vue，如果默认导入Vue的时候，如果用户的Vue版本和install中Vue版本不一致，可能就会出现问题")])]),t._v(" "),s("li",[s("p",[t._v("当"),s("strong",[t._v("调用install方法")]),t._v("的时候，会当前Vue挂载两个全局组件，给Vue.prototype创建两个属性$route"),s("strong",[t._v("和")]),t._v("$router**")])]),t._v(" "),s("li",[s("p",[t._v("install方法执行的时候，通过Vue.mixin放给所有的组件实例混入一个属性 router ，具体实现原理：通过Vue的全局钩子函数beforeCreate方法来实现，内部通过先判断父组件 this.$options.router来判断给父组件添加属性_routerRoot ，同时让_routerRoot等于当前的组件的Vue实例；给所有的子组件通过this.$parent来找到自己的父组件上的_routerRoot，这样机会让所有组件都能通过this._rouerRoot找到路由的router实例。"),s("strong",[t._v("总结：vue-router中install方法就是实现所有组件中路由实例的共享属性和状态")])])]),t._v(" "),s("li",[s("p",[t._v("install中需要调用vue-router的"),s("strong",[t._v("init")]),t._v("方法，实现初始化操作，在根组件中初始化操作，并且把当前根组件的 “"),s("strong",[t._v("this")]),t._v("” 传入")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("VueRouter的核心")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("内部通过传入的options，对用户传入的options，调用"),s("strong",[t._v("createMatcher")]),t._v("进行扁平化操作，"),s("strong",[t._v("createMatcher")]),t._v("方法会返回两个重要的方法："),s("strong",[t._v("match 和 addRoutes")]),t._v(";")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1. match方法：通过路由来匹配组件\n2. addRoutes方法：动态添加匹配规则\n")])])])]),t._v(" "),s("li",[s("p",[t._v("映射表拼接完成之后，就需要根据映射表匹配不同的路径进行跳转")])])])])]),t._v(" "),s("h6",{attrs:{id:"插件的作用-一般用户定义全局组件、全局指令、过滤器、原型方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插件的作用-一般用户定义全局组件、全局指令、过滤器、原型方法"}},[t._v("#")]),t._v(" 插件的作用：一般用户定义全局组件、全局指令、过滤器、原型方法....")])])}),[],!1,null,null,null);e.default=r.exports}}]);